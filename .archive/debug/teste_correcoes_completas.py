"""Script para testar as corre√ß√µes implementadas.

Este script valida:
1. Nome do agente correto na sa√≠da (embeddings_analyzer)
2. Exibi√ß√£o completa de todas as vari√°veis (31 no total)
"""
import sys
import os

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# For√ßar recarga dos m√≥dulos modificados
import importlib
if 'src.agent.orchestrator_agent' in sys.modules:
    del sys.modules['src.agent.orchestrator_agent']
if 'src.agent.csv_analysis_agent' in sys.modules:
    del sys.modules['src.agent.csv_analysis_agent']

from src.agent.orchestrator_agent import OrchestratorAgent

def test_central_tendency_full():
    """Testa se todas as vari√°veis s√£o exibidas."""
    
    print("="*80)
    print("TESTE: Medidas de Tend√™ncia Central - Exibi√ß√£o Completa")
    print("="*80)
    print()
    
    # Criar nova inst√¢ncia do agente
    print("üîÑ Criando nova inst√¢ncia do OrchestratorAgent...")
    agent = OrchestratorAgent()
    print("‚úÖ Agente inicializado")
    print()
    
    # Fazer pergunta sobre medidas de tend√™ncia central
    query = "Quais s√£o as medidas de tend√™ncia central (m√©dia, mediana)?"
    
    print(f"‚ùì Pergunta: {query}")
    print()
    print("üîÑ Processando...")
    print()
    
    # Processar consulta
    response = agent.process(query)
    
    # Exibir resposta
    print("="*80)
    print("RESPOSTA DO AGENTE:")
    print("="*80)
    print()
    
    content = response.get('content', response)
    print(content)
    print()
    
    # Verificar metadados
    metadata = response.get('metadata', {})
    print("="*80)
    print("VERIFICA√á√ÉO:")
    print("="*80)
    print()
    
    # 1. Verificar nome do agente
    agents_used = metadata.get('agents_used', [])
    agent_name = agents_used[0] if agents_used else 'N/A'
    
    if agent_name == 'embeddings_analyzer':
        print("‚úÖ CORRETO: Nome do agente = 'embeddings_analyzer'")
    else:
        print(f"‚ùå INCORRETO: Nome do agente = '{agent_name}' (esperado: 'embeddings_analyzer')")
    
    # 2. Verificar se todas as vari√°veis est√£o sendo exibidas
    if '... e mais' in content:
        print("‚ùå INCORRETO: Ainda h√° vari√°veis ocultas (mensagem '... e mais')")
    else:
        # Contar quantas linhas de vari√°veis existem na tabela
        lines = content.split('\n')
        table_lines = [l for l in lines if l.startswith('| ') and not l.startswith('| Vari√°vel')]
        
        if len(table_lines) >= 31:
            print(f"‚úÖ CORRETO: Todas as vari√°veis exibidas ({len(table_lines)} linhas na tabela)")
        else:
            print(f"‚ö†Ô∏è  PARCIAL: {len(table_lines)} vari√°veis exibidas (esperado: 31)")
    
    # 3. Verificar conformidade
    if 'embeddings_only' in str(metadata.get('conformidade', '')):
        print("‚úÖ CORRETO: Conformidade mantida (embeddings_only)")
    
    # 4. Verificar query type
    if metadata.get('query_type') == 'central_tendency':
        print("‚úÖ CORRETO: Query type = 'central_tendency'")
    
    print()
    print("="*80)
    print("METADADOS COMPLETOS:")
    print("="*80)
    print()
    print(f"‚Ä¢ Agentes usados: {agents_used}")
    print(f"‚Ä¢ Total de registros: {metadata.get('total_records', 'N/A')}")
    print(f"‚Ä¢ Colunas num√©ricas: {metadata.get('total_numeric_columns', 'N/A')}")
    print(f"‚Ä¢ Query type: {metadata.get('query_type', 'N/A')}")
    print(f"‚Ä¢ Conformidade: {metadata.get('conformidade', 'N/A')}")
    print()

if __name__ == "__main__":
    test_central_tendency_full()
