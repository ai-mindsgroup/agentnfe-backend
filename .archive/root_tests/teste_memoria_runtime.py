"""
Teste Pr√°tico: Mem√≥ria Persistente e LangChain em Runtime

Este script testa se:
1. Mem√≥ria persiste entre intera√ß√µes
2. LangChain est√° sendo usado
3. Tabelas SQL est√£o sendo acessadas
4. Contexto din√¢mico funciona
"""

import sys
import asyncio
from pathlib import Path
from uuid import uuid4
from datetime import datetime

sys.path.insert(0, str(Path(__file__).parent))

from src.agent.rag_data_agent import RAGDataAgent
from src.vectorstore.supabase_client import supabase
from src.utils.logging_config import get_logger

logger = get_logger(__name__)


async def test_memory_and_langchain():
    """Testa mem√≥ria e LangChain em runtime."""
    
    print("\n" + "=" * 80)
    print("TESTE PR√ÅTICO: MEM√ìRIA PERSISTENTE + LANGCHAIN")
    print("=" * 80)
    
    # 1. Criar agente
    print("\nüìù 1. INICIALIZANDO RAGDataAgent...")
    agent = RAGDataAgent()
    print(f"   ‚úÖ Agente criado: {agent.name}")
    print(f"   ‚úÖ Mem√≥ria habilitada: {agent.has_memory}")
    print(f"   ‚úÖ LLM LangChain: {agent.llm is not None}")
    
    if agent.llm:
        print(f"   ‚úÖ Tipo LLM: {type(agent.llm).__name__}")
    else:
        print(f"   ‚ö†Ô∏è  LLM LangChain n√£o dispon√≠vel (usando fallback)")
    
    # 2. Criar sess√£o √∫nica para teste
    session_id = str(uuid4())
    print(f"\nüìù 2. CRIANDO SESS√ÉO DE MEM√ìRIA...")
    print(f"   üîë Session ID: {session_id[:8]}...")
    
    # 3. Primeira intera√ß√£o (sem hist√≥rico)
    print(f"\nüìù 3. PRIMEIRA INTERA√á√ÉO (sem hist√≥rico pr√©vio)...")
    query1 = "Teste de mem√≥ria - primeira pergunta"
    
    result1 = await agent.process(
        query=query1,
        context={},
        session_id=session_id
    )
    
    print(f"   ‚úÖ Resposta recebida")
    metadata1 = result1.get('metadata', {})
    print(f"   ‚úÖ Session ID salvo: {metadata1.get('session_id', 'N/A')[:8]}...")
    print(f"   ‚úÖ Intera√ß√µes anteriores: {metadata1.get('previous_interactions', 0)}")
    
    # 4. Verificar no banco de dados
    print(f"\nüìù 4. VERIFICANDO DADOS NO SUPABASE...")
    
    # Verificar tabela agent_sessions
    sessions_result = supabase.table('agent_sessions')\
        .select('*')\
        .eq('session_id', session_id)\
        .execute()
    
    sessions_count = len(sessions_result.data) if sessions_result.data else 0
    print(f"   {'‚úÖ' if sessions_count > 0 else '‚ùå'} agent_sessions: {sessions_count} registro(s)")
    
    if sessions_result.data:
        session_uuid = sessions_result.data[0]['id']
        agent_name = sessions_result.data[0].get('agent_name')
        print(f"   ‚úÖ Session UUID: {str(session_uuid)[:8]}...")
        print(f"   ‚úÖ Agent Name: {agent_name}")
        
        # Verificar tabela agent_conversations
        convs_result = supabase.table('agent_conversations')\
            .select('*')\
            .eq('session_id', session_uuid)\
            .execute()
        
        convs_count = len(convs_result.data) if convs_result.data else 0
        print(f"   {'‚úÖ' if convs_count > 0 else '‚ùå'} agent_conversations: {convs_count} registro(s)")
        
        if convs_result.data:
            for i, conv in enumerate(convs_result.data[:3]):
                print(f"      - Intera√ß√£o {i+1}:")
                print(f"        Tipo: {conv.get('message_type')}")
                print(f"        Conte√∫do: {conv.get('content', '')[:60]}...")
    
    # 5. Segunda intera√ß√£o (DEVE ter hist√≥rico agora)
    print(f"\nüìù 5. SEGUNDA INTERA√á√ÉO (deve recuperar hist√≥rico)...")
    await asyncio.sleep(1)  # Dar tempo para persistir
    
    query2 = "Teste de mem√≥ria - segunda pergunta"
    
    result2 = await agent.process(
        query=query2,
        context={},
        session_id=session_id  # MESMA sess√£o
    )
    
    print(f"   ‚úÖ Resposta recebida")
    metadata2 = result2.get('metadata', {})
    print(f"   ‚úÖ Session ID: {metadata2.get('session_id', 'N/A')[:8]}...")
    print(f"   ‚úÖ Intera√ß√µes anteriores: {metadata2.get('previous_interactions', 0)}")
    
    previous_interactions = metadata2.get('previous_interactions', 0)
    if previous_interactions > 0:
        print(f"   üéâ MEM√ìRIA FUNCIONANDO! {previous_interactions} intera√ß√µes anteriores recuperadas")
    else:
        print(f"   ‚ö†Ô∏è  Mem√≥ria n√£o recuperou hist√≥rico")
    
    # 6. Verificar novamente o banco
    print(f"\nüìù 6. VERIFICANDO DADOS ATUALIZADOS NO SUPABASE...")
    
    if sessions_result.data:
        session_uuid = sessions_result.data[0]['id']
        
        convs_result_final = supabase.table('agent_conversations')\
            .select('*')\
            .eq('session_id', session_uuid)\
            .order('timestamp', desc=False)\
            .execute()
        
        convs_count_final = len(convs_result_final.data) if convs_result_final.data else 0
        print(f"   {'‚úÖ' if convs_count_final > 0 else '‚ùå'} agent_conversations: {convs_count_final} registro(s)")
        
        if convs_count_final >= 2:
            print(f"   üéâ MEM√ìRIA PERSISTENTE CONFIRMADA!")
            print(f"   ‚úÖ {convs_count_final} intera√ß√µes salvas no banco")
    
    # 7. Verificar imports LangChain
    print(f"\nüìù 7. VERIFICANDO IMPORTS LANGCHAIN...")
    
    try:
        from langchain_openai import ChatOpenAI
        print(f"   ‚úÖ langchain_openai.ChatOpenAI: Importado")
    except ImportError:
        print(f"   ‚ùå langchain_openai.ChatOpenAI: N√£o dispon√≠vel")
    
    try:
        from langchain_google_genai import ChatGoogleGenerativeAI
        print(f"   ‚úÖ langchain_google_genai.ChatGoogleGenerativeAI: Importado")
    except ImportError:
        print(f"   ‚ùå langchain_google_genai.ChatGoogleGenerativeAI: N√£o dispon√≠vel")
    
    try:
        from langchain.schema import HumanMessage, SystemMessage, AIMessage
        print(f"   ‚úÖ langchain.schema (Messages): Importado")
    except ImportError:
        print(f"   ‚ùå langchain.schema: N√£o dispon√≠vel")
    
    # 8. Verificar c√≥digo do RAGDataAgent
    print(f"\nüìù 8. VERIFICANDO C√ìDIGO DO RAGDataAgent...")
    
    rag_file = Path("src/agent/rag_data_agent.py")
    if rag_file.exists():
        content = rag_file.read_text(encoding='utf-8')
        
        checks = [
            ("from langchain_openai import ChatOpenAI", "Import ChatOpenAI"),
            ("from langchain_google_genai import ChatGoogleGenerativeAI", "Import ChatGoogleGenerativeAI"),
            ("self.llm.invoke(messages)", "Uso de llm.invoke()"),
            ("await self.init_memory_session", "Chamada init_memory_session()"),
            ("await self.recall_conversation_context", "Chamada recall_conversation_context()"),
            ("await self.remember_interaction", "Chamada remember_interaction()"),
        ]
        
        for check_str, desc in checks:
            if check_str in content:
                print(f"   ‚úÖ {desc}: Encontrado")
            else:
                print(f"   ‚ùå {desc}: N√£o encontrado")
    
    # RESUMO FINAL
    print(f"\n" + "=" * 80)
    print("üìä RESUMO FINAL")
    print("=" * 80)
    
    results = {
        "mem√≥ria_habilitada": agent.has_memory,
        "llm_langchain_presente": agent.llm is not None,
        "sessao_criada": sessions_count > 0,
        "conversas_salvas": convs_count_final if sessions_result.data else 0,
        "historico_recuperado": previous_interactions > 0
    }
    
    print(f"\n‚úÖ Mem√≥ria habilitada: {results['mem√≥ria_habilitada']}")
    print(f"{'‚úÖ' if results['llm_langchain_presente'] else '‚ö†Ô∏è '} LLM LangChain: {results['llm_langchain_presente']}")
    print(f"‚úÖ Sess√£o criada no banco: {results['sessao_criada']}")
    print(f"‚úÖ Conversas salvas: {results['conversas_salvas']}")
    print(f"{'üéâ' if results['historico_recuperado'] else '‚ö†Ô∏è '} Hist√≥rico recuperado: {results['historico_recuperado']}")
    
    # VEREDITO
    print(f"\n" + "=" * 80)
    if results['mem√≥ria_habilitada'] and results['sessao_criada'] and results['conversas_salvas'] >= 2:
        print("üéâ VEREDITO: MEM√ìRIA PERSISTENTE FUNCIONANDO!")
        print("‚úÖ Contexto din√¢mico entre intera√ß√µes: CONFIRMADO")
        print("‚úÖ Tabelas SQL sendo usadas: CONFIRMADO")
    else:
        print("‚ö†Ô∏è  VEREDITO: MEM√ìRIA COM PROBLEMAS")
    
    if results['llm_langchain_presente']:
        print("‚úÖ LangChain integrado: CONFIRMADO")
    else:
        print("‚ö†Ô∏è  LangChain: Imports presentes, LLM n√£o inicializado (fallback ativo)")
    
    print("=" * 80 + "\n")
    
    return results


if __name__ == "__main__":
    try:
        results = asyncio.run(test_memory_and_langchain())
        sys.exit(0 if results['mem√≥ria_habilitada'] and results['sessao_criada'] else 1)
    except KeyboardInterrupt:
        print("\n\n‚ùå Teste interrompido.\n")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Erro: {e}\n")
        import traceback
        traceback.print_exc()
        sys.exit(1)
