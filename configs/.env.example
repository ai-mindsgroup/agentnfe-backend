# Copie este arquivo para .env e preencha as chaves.
HISTOGRAMS_DIR=static/histogramas
SUPABASE_URL=https://ncefmfiulpwssaajybtl.supabase.co
SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5jZWZtZml1bHB3c3NhYWp5YnRsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkwNzgzMTYsImV4cCI6MjA3NDY1NDMxNn0.0HxnkiLUiPyqln1ZyheOvJt2widp-Y-sTJ-sXdktpwA
LOG_LEVEL=INFO

# ========================================================================
# CONFIGURAÇÕES DA API
# ========================================================================
# Host da API (0.0.0.0 para aceitar conexões externas, 127.0.0.1 apenas local)
API_HOST=0.0.0.0
# Porta da API (use porta não comum para segurança)
API_PORT=8011

# ========================================================================
# CONFIGURAÇÕES DE BANCO DE DADOS
# ========================================================================
DB_HOST=aws-1-sa-east-1.pooler.supabase.com
DB_PORT=6543
DB_NAME=postgres
DB_USER=postgres.ncefmfiulpwssaajybtl
DB_PASSWORD=Alder1310

# ========================================================================
# CHAVES DE API PARA LLMs
# ========================================================================
GROQ_API_KEY=
OPENAI_API_KEY=
GOOGLE_API_KEY=

# ========================================================================
# CONFIGURAÇÕES DE SEGURANÇA - API MODERNA
# ========================================================================
# Chave secreta para JWT (NÃO COMPARTILHE ESTA CHAVE! - Gere uma nova com: python -c "import secrets; print(secrets.token_urlsafe(64))")
SECRET_KEY=
# Algoritmo de criptografia JWT
JWT_ALGORITHM=HS256
# Tempo de expiração do token em minutos
ACCESS_TOKEN_EXPIRE_MINUTES=30
# Habilitar autenticação (false para desenvolvimento, true para produção)
ENABLE_AUTH=false
# Habilitar rate limiting
ENABLE_RATE_LIMITING=true
# Requisições permitidas por minuto
RATE_LIMIT_REQUESTS_PER_MINUTE=100

# ========================================================================
# CONFIGURAÇÕES DE INGESTÃO AUTOMÁTICA DE CSV
# ========================================================================

# Diretórios locais de gerenciamento de arquivos CSV
# Usar caminhos relativos à raiz do projeto (não usar caminhos absolutos!)
# Exemplo: data, data/processando, data/processado
EDA_DATA_DIR=data
EDA_DATA_DIR_PROCESSANDO=data/processando
EDA_DATA_DIR_PROCESSADO=data/processado

# Google Drive API - Configurações de autenticação
# Obtenha as credenciais em: https://console.cloud.google.com/apis/credentials
GOOGLE_DRIVE_ENABLED=false

# Modo de autenticação: "oauth" ou "service_account" (recomendado para automação)
# - oauth: Requer interação do usuário, não pode deletar todos os arquivos
# - service_account: Automático, pode deletar qualquer arquivo da pasta compartilhada
GOOGLE_DRIVE_AUTH_MODE=oauth

# Credenciais OAuth (modo "oauth")
GOOGLE_DRIVE_CREDENTIALS_FILE=configs/google_drive_credentials.json
GOOGLE_DRIVE_TOKEN_FILE=configs/google_drive_token.json

# Credenciais Service Account (modo "service_account" - RECOMENDADO)
# Veja instruções em: docs/GOOGLE_DRIVE_SERVICE_ACCOUNT_SETUP.md
GOOGLE_DRIVE_SERVICE_ACCOUNT_FILE=configs/google_drive_service_account.json

# ID da pasta do Google Drive a monitorar
GOOGLE_DRIVE_FOLDER_ID=your_google_drive_folder_id_here

# ID da pasta "processados" no Google Drive (opcional - será criada automaticamente)
# Se não especificado, cria pasta "processados" dentro da pasta monitorada
GOOGLE_DRIVE_PROCESSED_FOLDER_ID=

# Ação após processar arquivo: "move" ou "delete"
# - move: Move arquivo para pasta "processados" (RECOMENDADO - funciona com Service Account)
# - delete: Deleta arquivo (requer permissão Owner, não funciona com Service Account)
GOOGLE_DRIVE_POST_PROCESS_ACTION=move

# Intervalo de polling (em segundos) para verificar novos arquivos
AUTO_INGEST_POLLING_INTERVAL=300

# Padrão de arquivos para monitorar (regex)
AUTO_INGEST_FILE_PATTERN=.*\.csv$
