#!/usr/bin/env python3
"""
üí¨ Session Service - API Moderna
================================

Servi√ßo para gerenciar sess√µes de chat e hist√≥rico.

Vers√£o: 3.0.0
Data: 2025-10-29
"""

import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
import uuid

logger = logging.getLogger(__name__)

class SessionService:
    """Servi√ßo para gerenciar sess√µes de usu√°rio"""
    
    def __init__(self):
        """Inicializa o servi√ßo de sess√µes"""
        self.sessions: Dict[str, Dict[str, Any]] = {}
        logger.info("‚úÖ SessionService inicializado")
    
    def create_session(self, user_id: Optional[str] = None) -> str:
        """
        Cria uma nova sess√£o
        
        Args:
            user_id: ID do usu√°rio (opcional)
        
        Returns:
            ID da sess√£o criada
        """
        session_id = str(uuid.uuid4())
        
        self.sessions[session_id] = {
            "id": session_id,
            "user_id": user_id or "anonymous",
            "created_at": datetime.now().isoformat(),
            "last_activity": datetime.now().isoformat(),
            "messages": [],
            "context": {}
        }
        
        logger.info(f"‚úÖ Nova sess√£o criada: {session_id}")
        return session_id
    
    def get_session(self, session_id: str) -> Optional[Dict[str, Any]]:
        """
        Obt√©m uma sess√£o pelo ID
        
        Args:
            session_id: ID da sess√£o
        
        Returns:
            Dados da sess√£o ou None se n√£o existir
        """
        return self.sessions.get(session_id)
    
    def add_message(
        self,
        session_id: str,
        role: str,
        content: str,
        metadata: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        Adiciona uma mensagem ao hist√≥rico da sess√£o
        
        Args:
            session_id: ID da sess√£o
            role: Papel (user/assistant/system)
            content: Conte√∫do da mensagem
            metadata: Metadados adicionais
        
        Returns:
            True se adicionado com sucesso
        """
        session = self.sessions.get(session_id)
        if not session:
            logger.warning(f"‚ö†Ô∏è Sess√£o n√£o encontrada: {session_id}")
            return False
        
        message = {
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat(),
            "metadata": metadata or {}
        }
        
        session["messages"].append(message)
        session["last_activity"] = datetime.now().isoformat()
        
        return True
    
    def get_history(
        self,
        session_id: str,
        limit: Optional[int] = None
    ) -> List[Dict[str, Any]]:
        """
        Obt√©m hist√≥rico de mensagens da sess√£o
        
        Args:
            session_id: ID da sess√£o
            limit: Limite de mensagens (opcional)
        
        Returns:
            Lista de mensagens
        """
        session = self.sessions.get(session_id)
        if not session:
            return []
        
        messages = session["messages"]
        
        if limit:
            return messages[-limit:]
        
        return messages
    
    def update_context(
        self,
        session_id: str,
        context: Dict[str, Any]
    ) -> bool:
        """
        Atualiza contexto da sess√£o
        
        Args:
            session_id: ID da sess√£o
            context: Novo contexto
        
        Returns:
            True se atualizado com sucesso
        """
        session = self.sessions.get(session_id)
        if not session:
            return False
        
        session["context"].update(context)
        session["last_activity"] = datetime.now().isoformat()
        
        return True
    
    def delete_session(self, session_id: str) -> bool:
        """
        Deleta uma sess√£o
        
        Args:
            session_id: ID da sess√£o
        
        Returns:
            True se deletado com sucesso
        """
        if session_id in self.sessions:
            del self.sessions[session_id]
            logger.info(f"‚úÖ Sess√£o deletada: {session_id}")
            return True
        
        return False
    
    def list_sessions(self, user_id: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        Lista todas as sess√µes (opcionalmente filtrado por usu√°rio)
        
        Args:
            user_id: ID do usu√°rio para filtrar (opcional)
        
        Returns:
            Lista de sess√µes
        """
        sessions = list(self.sessions.values())
        
        if user_id:
            sessions = [s for s in sessions if s["user_id"] == user_id]
        
        return sessions
