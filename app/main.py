#!/usr/bin/env python3
"""
üöÄ API Moderna - AgentNFE Backend
==================================

API RESTful completa e moderna para o sistema multiagente AgentNFE.
Arquitetura modular, segura e escal√°vel com FastAPI.

Features:
- Sistema multiagente integrado
- Autentica√ß√£o JWT
- Rate limiting
- WebSocket para tasks longas
- Documenta√ß√£o autom√°tica
- Monitoramento e analytics
- Processamento ass√≠ncrono

Vers√£o: 3.0.0
Data: 2025-10-28
"""

from fastapi import FastAPI, HTTPException, Depends, Request, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
import uvicorn
import sys
import os
from pathlib import Path
from datetime import datetime
import logging
from typing import Dict, Any, List, Optional

# Adiciona o diret√≥rio raiz ao PYTHONPATH
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

# Imports dos roteadores
from app.routers import (
    agents,
    data_processing,
    embeddings,
    fraud_detection,
    analytics,
    tasks,
    health
)

# Imports dos middlewares
from app.middleware.auth import AuthMiddleware
from app.middleware.rate_limiting import RateLimitMiddleware
from app.middleware.logging import LoggingMiddleware
from app.middleware.error_handler import ErrorHandlerMiddleware

# Imports das configura√ß√µes
from app.core.config import Settings, get_settings
from app.core.database import init_database, close_database
from app.core.security import get_current_user

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/api_moderna.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Lifecycle da aplica√ß√£o
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o"""
    # Startup
    logger.info("üöÄ Iniciando API Moderna - AgentNFE Backend")
    await init_database()
    logger.info("‚úÖ Sistema inicializado com sucesso")
    
    yield
    
    # Shutdown
    logger.info("üîÑ Encerrando aplica√ß√£o")
    await close_database()
    logger.info("‚úÖ Aplica√ß√£o encerrada com sucesso")

# Configura√ß√µes
settings = get_settings()

# Inicializa√ß√£o do FastAPI
app = FastAPI(
    title="AgentNFE Backend - API Moderna",
    description="""
    ü§ñ **Sistema Multiagente para An√°lise Inteligente de Dados**
    
    Esta API moderna oferece:
    - üß† **Agentes Inteligentes**: RAG, CSV, Orquestrador
    - üõ°Ô∏è **Detec√ß√£o de Fraude**: IA avan√ßada para seguran√ßa
    - üìä **An√°lise de Dados**: Processamento inteligente de CSV
    - üîç **Busca Sem√¢ntica**: Sistema RAG com embeddings
    - üìà **Analytics**: Monitoramento e m√©tricas em tempo real
    - üîê **Seguran√ßa**: JWT, Rate limiting, Valida√ß√£o
    - ‚ö° **Performance**: Processamento ass√≠ncrono e WebSocket
    
    **Vers√£o**: 3.0.0 | **Ambiente**: {env}
    """.format(env=settings.environment),
    version="3.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    lifespan=lifespan,
    terms_of_service="/terms",
    contact={
        "name": "AI Minds Group",
        "url": "https://github.com/ai-mindsgroup/agentnfe-backend",
        "email": "contact@aiminds.group",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
)

# ============================================================================
# MIDDLEWARES - Configura√ß√£o de seguran√ßa e performance
# ============================================================================

# Security Headers
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=settings.allowed_hosts
)

# CORS - Configur√°vel por ambiente
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["X-Task-ID", "X-Rate-Limit-Remaining"]
)

# Compress√£o GZIP
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Middlewares customizados
app.add_middleware(ErrorHandlerMiddleware)
app.add_middleware(LoggingMiddleware)
app.add_middleware(RateLimitMiddleware)
app.add_middleware(AuthMiddleware)

# ============================================================================
# STATIC FILES - Servir arquivos est√°ticos
# ============================================================================

app.mount("/static", StaticFiles(directory="static"), name="static")
app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")
app.mount("/histogramas", StaticFiles(directory="outputs/histogramas"), name="histogramas")

# ============================================================================
# ROUTERS - Endpoints organizados por funcionalidade
# ============================================================================

# Health Check (sem autentica√ß√£o)
app.include_router(
    health.router,
    prefix="/health",
    tags=["üîã Health & Status"]
)

# API v1 - Endpoints principais
api_v1_prefix = "/api/v1"

# Agentes inteligentes
app.include_router(
    agents.router,
    prefix=f"{api_v1_prefix}/agents",
    tags=["ü§ñ Agentes Inteligentes"],
    dependencies=[Depends(get_current_user)]
)

# Processamento de dados
app.include_router(
    data_processing.router,
    prefix=f"{api_v1_prefix}/data",
    tags=["üìä Processamento de Dados"],
    dependencies=[Depends(get_current_user)]
)

# Sistema RAG/Embeddings
app.include_router(
    embeddings.router,
    prefix=f"{api_v1_prefix}/embeddings",
    tags=["üîç Sistema RAG"],
    dependencies=[Depends(get_current_user)]
)

# Detec√ß√£o de fraude
app.include_router(
    fraud_detection.router,
    prefix=f"{api_v1_prefix}/fraud",
    tags=["üõ°Ô∏è Detec√ß√£o de Fraude"],
    dependencies=[Depends(get_current_user)]
)

# Analytics e monitoramento
app.include_router(
    analytics.router,
    prefix=f"{api_v1_prefix}/analytics",
    tags=["üìà Analytics & Monitoramento"],
    dependencies=[Depends(get_current_user)]
)

# Sistema de tasks ass√≠ncronas
app.include_router(
    tasks.router,
    prefix=f"{api_v1_prefix}/tasks",
    tags=["‚ö° Tasks Ass√≠ncronas"],
    dependencies=[Depends(get_current_user)]
)

# ============================================================================
# WEBSOCKET - Para atualiza√ß√µes em tempo real
# ============================================================================

@app.websocket("/ws/tasks/{task_id}")
async def websocket_task_updates(websocket: WebSocket, task_id: str):
    """WebSocket para atualiza√ß√µes de tasks em tempo real"""
    await websocket.accept()
    try:
        # Implementar l√≥gica de updates de tasks
        from app.services.task_service import TaskService
        task_service = TaskService()
        
        async for update in task_service.get_task_updates(task_id):
            await websocket.send_json(update)
            
    except Exception as e:
        logger.error(f"Erro no WebSocket: {e}")
        await websocket.close(code=1000)

@app.websocket("/ws/monitoring")
async def websocket_monitoring(websocket: WebSocket):
    """WebSocket para monitoramento do sistema em tempo real"""
    await websocket.accept()
    try:
        from app.services.monitoring_service import MonitoringService
        monitoring = MonitoringService()
        
        async for metrics in monitoring.get_real_time_metrics():
            await websocket.send_json(metrics)
            
    except Exception as e:
        logger.error(f"Erro no WebSocket de monitoramento: {e}")
        await websocket.close(code=1000)

# ============================================================================
# ROOT ENDPOINTS - Endpoints principais
# ============================================================================

@app.get("/", include_in_schema=False)
async def root():
    """Redirect para documenta√ß√£o"""
    return RedirectResponse(url="/docs")

@app.get("/info", response_model=Dict[str, Any])
async def api_info():
    """Informa√ß√µes da API"""
    return {
        "name": "AgentNFE Backend - API Moderna",
        "version": "3.0.0",
        "description": "Sistema multiagente para an√°lise inteligente de dados",
        "environment": settings.environment,
        "timestamp": datetime.now().isoformat(),
        "features": {
            "authentication": "JWT Bearer Token",
            "rate_limiting": "Configur√°vel por usu√°rio",
            "async_tasks": "Redis + WebSocket",
            "agents": ["Orchestrator", "CSV", "RAG", "Fraud Detection"],
            "data_formats": ["CSV", "Excel", "JSON", "Parquet"],
            "ai_providers": ["OpenAI", "Google Gemini", "Groq"]
        },
        "endpoints": {
            "docs": "/docs",
            "redoc": "/redoc",
            "health": "/health",
            "api_v1": "/api/v1"
        },
        "support": {
            "github": "https://github.com/ai-mindsgroup/agentnfe-backend",
            "issues": "https://github.com/ai-mindsgroup/agentnfe-backend/issues"
        }
    }

@app.get("/terms")
async def terms_of_service():
    """Termos de servi√ßo"""
    return {
        "terms": "Termos de Uso - AgentNFE Backend",
        "version": "1.0",
        "effective_date": "2025-10-28",
        "description": "API para uso interno e desenvolvimento. Respeite os limites de rate limiting e use autentica√ß√£o adequada.",
        "contact": "contact@aiminds.group"
    }

# ============================================================================
# ERROR HANDLERS - Tratamento global de erros
# ============================================================================

@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    return JSONResponse(
        status_code=404,
        content={
            "error": "Not Found",
            "message": "O endpoint solicitado n√£o existe",
            "suggestion": "Consulte /docs para ver endpoints dispon√≠veis",
            "timestamp": datetime.now().isoformat()
        }
    )

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc):
    logger.error(f"Erro interno: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": "Erro interno do servidor",
            "timestamp": datetime.now().isoformat(),
            "request_id": getattr(request.state, 'request_id', 'unknown')
        }
    )

# ============================================================================
# STARTUP EVENT - Valida√ß√µes iniciais
# ============================================================================

@app.on_event("startup")
async def startup_event():
    """Valida√ß√µes e configura√ß√µes no startup"""
    logger.info("üîç Executando valida√ß√µes de startup...")
    
    # Validar configura√ß√µes cr√≠ticas
    if not settings.secret_key:
        logger.error("‚ùå SECRET_KEY n√£o configurado!")
        raise ValueError("SECRET_KEY √© obrigat√≥rio")
    
    # Validar conex√µes com banco de dados
    try:
        from app.core.database import test_connection
        await test_connection()
        logger.info("‚úÖ Conex√£o com banco de dados validada")
    except Exception as e:
        logger.error(f"‚ùå Erro na conex√£o com banco: {e}")
    
    # Validar sistema multiagente
    try:
        from src.agent.orchestrator_agent import OrchestratorAgent
        orchestrator = OrchestratorAgent()
        logger.info("‚úÖ Sistema multiagente carregado")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Sistema multiagente limitado: {e}")
    
    logger.info("üéØ API Moderna iniciada com sucesso!")

# ============================================================================
# MAIN - Execu√ß√£o da aplica√ß√£o
# ============================================================================

if __name__ == "__main__":
    print("\n" + "=" * 60)
    print("üöÄ AgentNFE Backend - API Moderna v3.0.0")
    print("=" * 60)
    print(f"üìç Servidor: http://{settings.host}:{settings.port}")
    print(f"üìö Documenta√ß√£o: http://{settings.host}:{settings.port}/docs")
    print(f"üîç ReDoc: http://{settings.host}:{settings.port}/redoc")
    print(f"üåç Ambiente: {settings.environment.upper()}")
    print(f"üîê Autentica√ß√£o: {'‚úÖ Ativa' if settings.enable_auth else '‚ùå Desabilitada'}")
    print(f"‚ö° Rate Limiting: {'‚úÖ Ativo' if settings.enable_rate_limiting else '‚ùå Desabilitado'}")
    print("\nüéØ Recursos Dispon√≠veis:")
    print("   ‚Ä¢ Sistema Multiagente (RAG, CSV, Fraude)")
    print("   ‚Ä¢ Processamento Ass√≠ncrono de Dados")
    print("   ‚Ä¢ WebSocket para Updates em Tempo Real")
    print("   ‚Ä¢ Analytics e Monitoramento Avan√ßado")
    print("   ‚Ä¢ Autentica√ß√£o JWT e Rate Limiting")
    print("\n‚èπÔ∏è Pressione Ctrl+C para parar\n")
    
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level="info" if not settings.debug else "debug",
        access_log=True,
        reload_dirs=["app", "src"] if settings.debug else None
    )