"""Exemplo de uso do sistema de visualiza√ß√£o gr√°fica.

Este script demonstra as capacidades de visualiza√ß√£o autom√°tica
do sistema EDA AI Minds, incluindo:
- Histogramas com estat√≠sticas
- Scatter plots com correla√ß√£o
- Boxplots com detec√ß√£o de outliers
- Gr√°ficos de barras
- Heatmaps de correla√ß√£o

Utiliza dados de fraude de cart√£o de cr√©dito do Kaggle.
"""
import sys
from pathlib import Path

# Adiciona root ao path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

import pandas as pd
import numpy as np
from src.tools.graph_generator import GraphGenerator, detect_visualization_need
from src.utils.logging_config import get_logger

logger = get_logger("examples.visualizacao")


def exemplo_histograma():
    """Demonstra cria√ß√£o de histograma com estat√≠sticas."""
    print("\n" + "="*80)
    print("üìä EXEMPLO 1: HISTOGRAMA")
    print("="*80 + "\n")
    
    # Carregar dados
    data_path = root_dir / "data" / "creditcard_test_500.csv"
    
    if not data_path.exists():
        print(f"‚ùå Arquivo n√£o encontrado: {data_path}")
        print("üí° Certifique-se de ter o arquivo creditcard_test_500.csv em data/")
        return
    
    df = pd.read_csv(data_path)
    
    # Criar gerador
    generator = GraphGenerator(output_dir=root_dir / "temp" / "visualizations")
    
    # Gerar histograma da coluna Amount
    print("Gerando histograma da coluna 'Amount'...")
    img, stats = generator.histogram(
        data=df,
        column="Amount",
        bins=50,
        title="Distribui√ß√£o de Valores de Transa√ß√µes",
        xlabel="Valor da Transa√ß√£o (‚Ç¨)",
        kde=True,
        return_base64=False  # Salvar em arquivo
    )
    
    print("\n‚úÖ Histograma gerado com sucesso!")
    print(f"\nüìà Estat√≠sticas:")
    print(f"  ‚Ä¢ Contagem: {stats['count']}")
    print(f"  ‚Ä¢ M√©dia: ‚Ç¨{stats['mean']:.2f}")
    print(f"  ‚Ä¢ Mediana: ‚Ç¨{stats['median']:.2f}")
    print(f"  ‚Ä¢ Desvio Padr√£o: ‚Ç¨{stats['std']:.2f}")
    print(f"  ‚Ä¢ M√≠nimo: ‚Ç¨{stats['min']:.2f}")
    print(f"  ‚Ä¢ M√°ximo: ‚Ç¨{stats['max']:.2f}")
    print(f"  ‚Ä¢ Q1 (25%): ‚Ç¨{stats['q25']:.2f}")
    print(f"  ‚Ä¢ Q3 (75%): ‚Ç¨{stats['q75']:.2f}")
    
    if img.startswith("data:image"):
        print(f"\nüñºÔ∏è Imagem em base64 (primeiros 100 caracteres): {img[:100]}...")
    else:
        print(f"\nüñºÔ∏è Imagem salva em: {img}")


def exemplo_scatter():
    """Demonstra cria√ß√£o de scatter plot com correla√ß√£o."""
    print("\n" + "="*80)
    print("üìä EXEMPLO 2: SCATTER PLOT")
    print("="*80 + "\n")
    
    data_path = root_dir / "data" / "creditcard_test_500.csv"
    
    if not data_path.exists():
        print(f"‚ùå Arquivo n√£o encontrado: {data_path}")
        return
    
    df = pd.read_csv(data_path)
    
    generator = GraphGenerator(output_dir=root_dir / "temp" / "visualizations")
    
    # Gerar scatter plot entre V1 e V2
    print("Gerando scatter plot entre 'V1' e 'V2'...")
    img, stats = generator.scatter_plot(
        data=df,
        x_column="V1",
        y_column="V2",
        hue_column="Class",
        title="Rela√ß√£o entre V1 e V2 (Colorido por Classe)",
        size=30,
        return_base64=False  # Salvar em arquivo
    )
    
    print("\n‚úÖ Scatter plot gerado com sucesso!")
    print(f"\nüìà Estat√≠sticas:")
    print(f"  ‚Ä¢ Correla√ß√£o: {stats['correlation']:.4f}")
    print(f"  ‚Ä¢ N√∫mero de pontos: {stats['n_points']}")
    print(f"  ‚Ä¢ M√©dia X (V1): {stats['x_mean']:.4f}")
    print(f"  ‚Ä¢ M√©dia Y (V2): {stats['y_mean']:.4f}")
    
    if img.startswith("data:image"):
        print(f"\nüñºÔ∏è Imagem em base64 gerada")
    else:
        print(f"\nüñºÔ∏è Imagem salva em: {img}")


def exemplo_boxplot():
    """Demonstra cria√ß√£o de boxplot com detec√ß√£o de outliers."""
    print("\n" + "="*80)
    print("üìä EXEMPLO 3: BOXPLOT")
    print("="*80 + "\n")
    
    data_path = root_dir / "data" / "creditcard_test_500.csv"
    
    if not data_path.exists():
        print(f"‚ùå Arquivo n√£o encontrado: {data_path}")
        return
    
    df = pd.read_csv(data_path)
    
    generator = GraphGenerator(output_dir=root_dir / "temp" / "visualizations")
    
    # Gerar boxplot da coluna Time
    print("Gerando boxplot da coluna 'Time'...")
    img, stats = generator.boxplot(
        data=df,
        column="Time",
        title="Boxplot: Distribui√ß√£o de Tempo das Transa√ß√µes",
        return_base64=False  # Salvar em arquivo
    )
    
    print("\n‚úÖ Boxplot gerado com sucesso!")
    print(f"\nüìà Estat√≠sticas:")
    print(f"  ‚Ä¢ Q1 (25%): {stats['q1']:.2f}")
    print(f"  ‚Ä¢ Mediana (50%): {stats['median']:.2f}")
    print(f"  ‚Ä¢ Q3 (75%): {stats['q3']:.2f}")
    print(f"  ‚Ä¢ IQR (Intervalo Interquartil): {stats['iqr']:.2f}")
    print(f"  ‚Ä¢ Outliers detectados: {stats['outliers_count']} ({stats['outliers_percentage']:.2f}%)")
    
    if img.startswith("data:image"):
        print(f"\nüñºÔ∏è Imagem em base64 gerada")
    else:
        print(f"\nüñºÔ∏è Imagem salva em: {img}")


def exemplo_bar_chart():
    """Demonstra cria√ß√£o de gr√°fico de barras."""
    print("\n" + "="*80)
    print("üìä EXEMPLO 4: GR√ÅFICO DE BARRAS")
    print("="*80 + "\n")
    
    data_path = root_dir / "data" / "creditcard_test_500.csv"
    
    if not data_path.exists():
        print(f"‚ùå Arquivo n√£o encontrado: {data_path}")
        return
    
    df = pd.read_csv(data_path)
    
    generator = GraphGenerator(output_dir=root_dir / "temp" / "visualizations")
    
    # Contar transa√ß√µes por classe
    class_counts = df['Class'].value_counts().to_dict()
    class_labels = {0: 'Leg√≠tima', 1: 'Fraude'}
    class_counts_labeled = {class_labels[k]: v for k, v in class_counts.items()}
    
    print("Gerando gr√°fico de barras de transa√ß√µes por classe...")
    img, stats = generator.bar_chart(
        data=class_counts_labeled,
        title="Distribui√ß√£o de Transa√ß√µes por Classe",
        xlabel="Classe",
        ylabel="Quantidade de Transa√ß√µes",
        color="steelblue",
        return_base64=False  # Salvar em arquivo
    )
    
    print("\n‚úÖ Gr√°fico de barras gerado com sucesso!")
    print(f"\nüìà Estat√≠sticas:")
    print(f"  ‚Ä¢ Total: {stats['total']}")
    print(f"  ‚Ä¢ M√©dia: {stats['mean']:.2f}")
    print(f"  ‚Ä¢ M√°ximo: {stats['max']}")
    print(f"  ‚Ä¢ Categoria com mais transa√ß√µes: {stats['max_category']}")
    
    if img.startswith("data:image"):
        print(f"\nüñºÔ∏è Imagem em base64 gerada")
    else:
        print(f"\nüñºÔ∏è Imagem salva em: {img}")


def exemplo_heatmap():
    """Demonstra cria√ß√£o de heatmap de correla√ß√£o."""
    print("\n" + "="*80)
    print("üìä EXEMPLO 5: HEATMAP DE CORRELA√á√ÉO")
    print("="*80 + "\n")
    
    data_path = root_dir / "data" / "creditcard_test_500.csv"
    
    if not data_path.exists():
        print(f"‚ùå Arquivo n√£o encontrado: {data_path}")
        return
    
    df = pd.read_csv(data_path)
    
    generator = GraphGenerator(output_dir=root_dir / "temp" / "visualizations")
    
    # Selecionar apenas algumas colunas para visualiza√ß√£o
    columns_to_plot = ['Time', 'Amount', 'V1', 'V2', 'V3', 'V4', 'V5']
    
    print("Gerando heatmap de correla√ß√£o...")
    img, stats = generator.correlation_heatmap(
        data=df,
        columns=columns_to_plot,
        title="Matriz de Correla√ß√£o (Features Selecionadas)",
        return_base64=False  # Salvar em arquivo
    )
    
    print("\n‚úÖ Heatmap gerado com sucesso!")
    print(f"\nüìà Estat√≠sticas:")
    print(f"  ‚Ä¢ N√∫mero de vari√°veis: {stats['n_variables']}")
    print(f"  ‚Ä¢ Correla√ß√£o m√©dia: {stats['mean_correlation']:.4f}")
    
    if stats['strongest_positive']:
        print(f"  ‚Ä¢ Correla√ß√£o positiva mais forte: {stats['strongest_positive']['var1']} ‚Üî {stats['strongest_positive']['var2']} ({stats['strongest_positive']['correlation']:.4f})")
    
    if stats['strongest_negative']:
        print(f"  ‚Ä¢ Correla√ß√£o negativa mais forte: {stats['strongest_negative']['var1']} ‚Üî {stats['strongest_negative']['var2']} ({stats['strongest_negative']['correlation']:.4f})")
    
    if img.startswith("data:image"):
        print(f"\nüñºÔ∏è Imagem em base64 gerada")
    else:
        print(f"\nüñºÔ∏è Imagem salva em: {img}")


def exemplo_deteccao_automatica():
    """Demonstra detec√ß√£o autom√°tica de necessidade de visualiza√ß√£o."""
    print("\n" + "="*80)
    print("üìä EXEMPLO 6: DETEC√á√ÉO AUTOM√ÅTICA DE VISUALIZA√á√ÉO")
    print("="*80 + "\n")
    
    queries = [
        "Mostre um histograma da distribui√ß√£o de valores",
        "Gere um gr√°fico de dispers√£o entre V1 e V2",
        "Fa√ßa um boxplot para detectar outliers",
        "Crie um gr√°fico de barras comparando as classes",
        "Exiba um heatmap de correla√ß√£o",
        "Qual √© a m√©dia de Amount?",  # N√£o requer visualiza√ß√£o
        "Analise os dados de fraude"  # Gen√©rico
    ]
    
    for query in queries:
        viz_type = detect_visualization_need(query)
        status = f"‚úÖ {viz_type}" if viz_type else "‚ùå Nenhuma"
        print(f"Query: '{query}'")
        print(f"  ‚Üí Visualiza√ß√£o detectada: {status}\n")


if __name__ == "__main__":
    print("\n" + "="*80)
    print("üé® EXEMPLOS DE USO: SISTEMA DE VISUALIZA√á√ÉO GR√ÅFICA")
    print("="*80)
    
    try:
        # Executar todos os exemplos
        exemplo_histograma()
        exemplo_scatter()
        exemplo_boxplot()
        exemplo_bar_chart()
        exemplo_heatmap()
        exemplo_deteccao_automatica()
        
        print("\n" + "="*80)
        print("‚úÖ TODOS OS EXEMPLOS CONCLU√çDOS COM SUCESSO!")
        print("="*80 + "\n")
        
        # Verificar se diret√≥rio de sa√≠da foi criado
        output_dir = root_dir / "temp" / "visualizations"
        if output_dir.exists():
            files = list(output_dir.glob("*.png"))
            print(f"üìÅ {len(files)} imagens salvas em: {output_dir}")
            for f in files:
                print(f"  ‚Ä¢ {f.name}")
        
    except Exception as e:
        logger.error(f"Erro durante execu√ß√£o dos exemplos: {e}", exc_info=True)
        print(f"\n‚ùå Erro: {e}")
