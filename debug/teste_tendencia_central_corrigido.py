"""Script de teste para validar medidas de tend√™ncia central.

Este script testa se o agente responde corretamente perguntas sobre m√©dia e mediana
usando dados REAIS APENAS da tabela embeddings do Supabase.

‚ö†Ô∏è CONFORMIDADE: NENHUM CSV √© lido - APENAS tabela embeddings.
"""
import sys
import os

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.agent.orchestrator_agent import OrchestratorAgent

def test_central_tendency_query():
    """Testa pergunta sobre medidas de tend√™ncia central."""
    
    print("="*80)
    print("TESTE: Medidas de Tend√™ncia Central (APENAS EMBEDDINGS)")
    print("="*80)
    print()
    
    # Criar nova inst√¢ncia do agente
    print("üîÑ Criando nova inst√¢ncia do OrchestratorAgent...")
    agent = OrchestratorAgent()
    print("‚úÖ Agente inicializado")
    print()
    
    # Fazer pergunta sobre medidas de tend√™ncia central
    query = "Quais s√£o as medidas de tend√™ncia central (m√©dia, mediana)?"
    
    print(f"‚ùì Pergunta: {query}")
    print()
    print("üîÑ Processando...")
    print()
    
    # Processar consulta
    response = agent.process(query)
    
    # Exibir resposta
    print("="*80)
    print("RESPOSTA DO AGENTE:")
    print("="*80)
    print()
    print(response.get('content', response))
    print()
    
    # Verificar metadados
    metadata = response.get('metadata', {})
    print("="*80)
    print("METADADOS DA RESPOSTA:")
    print("="*80)
    print()
    print(f"‚Ä¢ Query Type: {metadata.get('query_type', 'N/A')}")
    print(f"‚Ä¢ Total Records: {metadata.get('total_records', 'N/A')}")
    print(f"‚Ä¢ Total Numeric Columns: {metadata.get('total_numeric_columns', 'N/A')}")
    print(f"‚Ä¢ Conformidade: {metadata.get('conformidade', 'N/A')}")
    print(f"‚Ä¢ Agente Usado: {metadata.get('agent_used', 'N/A')}")
    print()
    
    # Verificar se resposta cont√©m dados reais
    content = response.get('content', '').lower()
    has_real_data = any([
        metadata.get('total_records', 0) > 0,
        metadata.get('total_numeric_columns', 0) > 0,
        metadata.get('central_tendency') is not None,
        'chunk_text parseada' in content,
        metadata.get('conformidade') == 'embeddings_only',
        metadata.get('query_type') == 'central_tendency'
    ])
    
    # Verificar se N√ÉO est√° usando dados gen√©ricos do LLM
    has_generic_response = any([
        's√£o estat√≠sticas que descrevem' in content and metadata.get('total_records', 0) == 0,
        metadata.get('agent_used') == 'llm_manager',
        'groq' in str(metadata.get('provider', '')).lower()
    ])
    
    print("="*80)
    print("RESULTADO DO TESTE:")
    print("="*80)
    print()
    
    if has_real_data and not has_generic_response:
        print("‚úÖ SUCESSO: Agente respondeu com dados reais da tabela embeddings")
        print("‚úÖ Resposta cont√©m m√©dia e/ou mediana calculadas dos dados reais")
        print("‚úÖ Conformidade mantida (APENAS embeddings do Supabase)")
        print("‚úÖ Query Type correto: central_tendency")
    elif has_generic_response:
        print("‚ùå FALHA: Agente retornou resposta gen√©rica do LLM (Groq)")
        print("‚ùå N√£o consultou dados reais da tabela embeddings")
        print("‚ö†Ô∏è  Verifique o roteamento de queries no orchestrator")
        print("‚ö†Ô∏è  Palavras-chave para tend√™ncia central podem n√£o estar sendo detectadas")
    else:
        print("‚ùå FALHA: Resposta amb√≠gua ou incompleta")
        print("‚ö†Ô∏è  Verifique os logs para mais detalhes")
    
    print()
    print("="*80)
    print("VERIFICA√á√ÉO DE CONFORMIDADE:")
    print("="*80)
    print()
    print(f"‚Ä¢ Dados de embeddings: {'‚úÖ SIM' if metadata.get('conformidade') == 'embeddings_only' else '‚ùå N√ÉO'}")
    print(f"‚Ä¢ Total de registros: {metadata.get('total_records', 0):,}")
    print(f"‚Ä¢ Colunas num√©ricas: {metadata.get('total_numeric_columns', 0)}")
    print(f"‚Ä¢ Query Type: {metadata.get('query_type', 'N/A')}")
    print(f"‚Ä¢ Agente usado: {metadata.get('agent_used', 'N/A')}")
    print()
    
    return has_real_data and not has_generic_response

if __name__ == "__main__":
    success = test_central_tendency_query()
    sys.exit(0 if success else 1)
